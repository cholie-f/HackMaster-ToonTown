from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
import random
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
AUTH, SAFE_CHOICE, PIN_ENTRY = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await update.message.reply_text(
        "üîí ToonTown Security System\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return AUTH

async def authenticate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≥–ª—É—à–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    context.user_data['character'] = {
        'name': update.message.text,
        'skill': '–•–∞–∫–µ—Ä',  # –ó–∞–≥–ª—É—à–∫–∞
        'session_start': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    await update.message.reply_text(
        f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: {update.message.text}\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ–π—Ñ–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return SAFE_CHOICE

async def choose_safe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–π—Ñ–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–∏–Ω-–∫–æ–¥–∞"""
    safe_number = update.message.text
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –ø–∏–Ω-–∫–æ–¥
    context.user_data['safe'] = {
        'number': safe_number,
        'pin': ''.join(random.sample('0123456789', 4)),
        'level': 'easy',  # –ó–∞–≥–ª—É—à–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        'attempts_left': 5
    }
    
    character = context.user_data['character']
    await update.message.reply_text(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {character['name']}\n"
        f"üïí –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: {character['session_start']}\n"
        f"‚ö° –ù–∞–≤—ã–∫: {character['skill']}\n"
        f"üîì –í–∑–ª–æ–º —Å–µ–π—Ñ–∞: {safe_number}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: Easy\n\n"
        "–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –ø–∏–Ω-–∫–æ–¥:",
        reply_markup=ReplyKeyboardRemove()
    )
    return PIN_ENTRY

async def hack_attempt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω-–∫–æ–¥–∞"""
    user_input = update.message.text
    safe_data = context.user_data['safe']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not (user_input.isdigit() and len(user_input) == 4):
        await update.message.reply_text("‚ùå –ü–∏–Ω-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã")
        return PIN_ENTRY
    
    safe_data['attempts_left'] -= 1
    
    if user_input == safe_data['pin']:
        await update.message.reply_text(
            "üéâ –°–µ–π—Ñ –≤–∑–ª–æ–º–∞–Ω!\n"
            "–î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –ø–æ–ª—É—á–µ–Ω.\n\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –≤–∑–ª–æ–º–∞ –≤–≤–µ–¥–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    else:
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–∫–∏
        correct_digits = sum(d in safe_data['pin'] for d in user_input)
        correct_positions = sum(1 for i in range(4) if user_input[i] == safe_data['pin'][i])
        
        if safe_data['attempts_left'] <= 0:
            await update.message.reply_text(
                "üö® –°–µ–π—Ñ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! –ü–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.\n"
                "–î–ª—è –Ω–æ–≤–æ–≥–æ –≤–∑–ª–æ–º–∞ –≤–≤–µ–¥–∏—Ç–µ /start",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
        
        hint = (
            f"üîê –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {safe_data['attempts_left']}\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä: {correct_digits}\n"
            f"‚Ä¢ –ù–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö: {correct_positions}"
        )
        await update.message.reply_text(hint)
        return PIN_ENTRY

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END
